svxyQR <- vix3mVxmt < 1 & vix3mVxmt < maLong
last_sig <- tail(svxyQR, 5)
action <- ifelse(coredata(last_sig), "BUY", "SELL")
table <- cbind(index(last_sig), action, table)
#================================ TTO SIGNAL ===================================
getSymbols("SPY")
vol2 <- rollapply(Cl(SPY), FUN = sd.annualized, width = 2)
df <- merge(vxv, vol2, join = "inner")
colnames(df) <- c("", "", "", "vix3m", "vol2day")
sigSvxyTTO <- EMA(df$vix3m - df$vol2day, n = 2) > 1
last_sig_tto <- tail(sigSvxyTTO, 5)
action_tto  <- ifelse(coredata(last_sig_tto), "BUY", "SELL")
table <- cbind(data.frame(index(last_sig_tto), action_tto), table)
names(table) <- c("DateTTO", "ActionTTO", "DateQR", "ActionQR", "DateUpro", "ActionUpro")
body <- htmlTable(table, rnames = FALSE)
return(body)
}
sendSignal <- function(address = "benbuzzee@gmail.com", body = "message"){
send.mail(from = address,
to = address,
subject = "Daily Volatility Signal",
body = body,
smtp = list(host.name = "aspmx.l.google.com", port = 25),
authenticate = FALSE,
html = TRUE,
send = TRUE)
}
sendSignal(body = getSignal())
getFedData <- function(tag = "DFF"){
#=== pull data ===#
api.key <- "bea3df08931786951992bd042f7b2254"
fred <- fredr::fredr(api.key)
# REQUIRES global fred object to be loaded
dt <- fred$series.observations(tag)
dt <- dt %>% as.tibble()
print("removing NAs")
# remove NA's
dt$value <- as.numeric(dt$value)
dt <- dt[!is.na(dt$value),]
#=== clean dataframe up ===#
print("cleaning data")
# remove unneeded columns
dt <-  dt %>% dplyr::select(date, value) %>% dplyr::mutate(date = as.Date(date))
# round all dates to nearest month
dt$date <- dt$date %>% lubridate::round_date(unit = "month")
# for each month only retain median value
dt <- dt %>% dplyr::group_by(date) %>% dplyr::summarize(value = median(value))
return(dt)
}
cue <- getFedData(tag = "UNRATE")
#=== pull data ===#
api.key <- "bea3df08931786951992bd042f7b2254"
fred <- fredr::fredr(api.key)
?fred
?fredr
# REQUIRES global fred object to be loaded
dt <- fred$series.observations(tag)
# REQUIRES global fred object to be loaded
dt <- fredr(tag)
getFedData <- function(tag = "DFF"){
#=== pull data ===#
#api.key <- "bea3df08931786951992bd042f7b2254"
#fredr_set_key(api.key)
# REQUIRES global fred object to be loaded
dt <- fredr(tag)
dt <- dt %>% as.tibble()
print("removing NAs")
# remove NA's
dt$value <- as.numeric(dt$value)
dt <- dt[!is.na(dt$value),]
#=== clean dataframe up ===#
print("cleaning data")
# remove unneeded columns
dt <-  dt %>% dplyr::select(date, value) %>% dplyr::mutate(date = as.Date(date))
# round all dates to nearest month
dt$date <- dt$date %>% lubridate::round_date(unit = "month")
# for each month only retain median value
dt <- dt %>% dplyr::group_by(date) %>% dplyr::summarize(value = median(value))
return(dt)
}
cue <- getFedData(tag = "UNRATE")
require(downloader)
require(quantmod)
require(mailR)
require(htmlTable)
require(PerformanceAnalytics)
require(fredr)
# mailR requires 32 bit R and java be installed
library(rJava)
getSignal <- function(){
# ====================================== PHIL ECON UPRO/TMF SIGNAL ======================================================
getFedData <- function(tag = "DFF"){
#=== pull data ===#
#api.key <- "bea3df08931786951992bd042f7b2254"
#fredr_set_key(api.key)
# REQUIRES global fred object to be loaded
dt <- fredr(tag)
dt <- dt %>% as.tibble()
print("removing NAs")
# remove NA's
dt$value <- as.numeric(dt$value)
dt <- dt[!is.na(dt$value),]
#=== clean dataframe up ===#
print("cleaning data")
# remove unneeded columns
dt <-  dt %>% dplyr::select(date, value) %>% dplyr::mutate(date = as.Date(date))
# round all dates to nearest month
dt$date <- dt$date %>% lubridate::round_date(unit = "month")
# for each month only retain median value
dt <- dt %>% dplyr::group_by(date) %>% dplyr::summarize(value = median(value))
return(dt)
}
# ======== UNEMPLOYMENT ==========
cue <- getFedData(tag = "UNRATE")
cue <- xts(cue$value, order.by = cue$date)
# ========= SPY ===========
getSymbols("VFINX", from = "2000-12-01")
spy <- Cl(VFINX)
names(spy) <- "spy"
# ========= SIGNAL ===========
df <- merge(spy, cue, fill = NA)
df <- na.locf(df)
df <- df[index(df) > min(index(spy)),]
spySma10 <- EMA(df$spy, n = 22*12)
unrate12 <- EMA(df$cue, n = 22*12)
# Buy when unemployment is below its 12 mo moving average
signal_phil <- !((df$cue > unrate12) & (df$spy < spySma10))
last_sig_phil <- tail(signal_phil, 5)
action <- ifelse(coredata(last_sig_phil), "BUY", "SELL")
table <- data.frame(index(last_sig_phil), action)
# ====================================== QUANTSTRATTRADER STRAT ======================================================
# RETRIEVE THE DATA
download("http://www.cboe.com/publish/scheduledtask/mktdata/datahouse/vix3mdailyprices.csv",
destfile="vxvData.csv")
download("http://www.cboe.com/publish/ScheduledTask/MktData/datahouse/vix6mdailyprices.csv",
destfile="vxmtData.csv")
vxv <- xts(read.zoo("vxvData.csv", header=TRUE, sep=",", format="%m/%d/%Y", skip=2))
vxmt <- xts(read.zoo("vxmtData.csv", header=TRUE, sep=",", format="%m/%d/%Y", skip=2))
# Our signal is that the there is more volatility expected long term than short term
# and the ratio is above its 60 day moving average.
vix3mVxmt <- Cl(vxv)/Cl(vxmt)
maLong <- SMA(vix3mVxmt, 60)
svxyQR <- vix3mVxmt < 1 & vix3mVxmt < maLong
last_sig <- tail(svxyQR, 5)
action <- ifelse(coredata(last_sig), "BUY", "SELL")
table <- cbind(index(last_sig), action, table)
#================================ TTO SIGNAL ===================================
getSymbols("SPY")
vol2 <- rollapply(Cl(SPY), FUN = sd.annualized, width = 2)
df <- merge(vxv, vol2, join = "inner")
colnames(df) <- c("", "", "", "vix3m", "vol2day")
sigSvxyTTO <- EMA(df$vix3m - df$vol2day, n = 2) > 1
last_sig_tto <- tail(sigSvxyTTO, 5)
action_tto  <- ifelse(coredata(last_sig_tto), "BUY", "SELL")
table <- cbind(data.frame(index(last_sig_tto), action_tto), table)
names(table) <- c("DateTTO", "ActionTTO", "DateQR", "ActionQR", "DateUpro", "ActionUpro")
body <- htmlTable(table, rnames = FALSE)
return(body)
}
sendSignal <- function(address = "benbuzzee@gmail.com", body = "message"){
send.mail(from = address,
to = address,
subject = "Daily Volatility Signal",
body = body,
smtp = list(host.name = "aspmx.l.google.com", port = 25),
authenticate = FALSE,
html = TRUE,
send = TRUE)
}
sendSignal(body = getSignal())
library(tidyverse)
getSignal <- function(){
# ====================================== PHIL ECON UPRO/TMF SIGNAL ======================================================
getFedData <- function(tag = "DFF"){
#=== pull data ===#
#api.key <- "bea3df08931786951992bd042f7b2254"
#fredr_set_key(api.key)
# REQUIRES global fred object to be loaded
dt <- fredr(tag)
dt <- dt %>% as.tibble()
print("removing NAs")
# remove NA's
dt$value <- as.numeric(dt$value)
dt <- dt[!is.na(dt$value),]
#=== clean dataframe up ===#
print("cleaning data")
# remove unneeded columns
dt <-  dt %>% dplyr::select(date, value) %>% dplyr::mutate(date = as.Date(date))
# round all dates to nearest month
dt$date <- dt$date %>% lubridate::round_date(unit = "month")
# for each month only retain median value
dt <- dt %>% dplyr::group_by(date) %>% dplyr::summarize(value = median(value))
return(dt)
}
# ======== UNEMPLOYMENT ==========
cue <- getFedData(tag = "UNRATE")
cue <- xts(cue$value, order.by = cue$date)
# ========= SPY ===========
getSymbols("VFINX", from = "2000-12-01")
spy <- Cl(VFINX)
names(spy) <- "spy"
# ========= SIGNAL ===========
df <- merge(spy, cue, fill = NA)
df <- na.locf(df)
df <- df[index(df) > min(index(spy)),]
spySma10 <- EMA(df$spy, n = 22*12)
unrate12 <- EMA(df$cue, n = 22*12)
# Buy when unemployment is below its 12 mo moving average
signal_phil <- !((df$cue > unrate12) & (df$spy < spySma10))
last_sig_phil <- tail(signal_phil, 5)
action <- ifelse(coredata(last_sig_phil), "BUY", "SELL")
table <- data.frame(index(last_sig_phil), action)
# ====================================== QUANTSTRATTRADER STRAT ======================================================
# RETRIEVE THE DATA
download("http://www.cboe.com/publish/scheduledtask/mktdata/datahouse/vix3mdailyprices.csv",
destfile="vxvData.csv")
download("http://www.cboe.com/publish/ScheduledTask/MktData/datahouse/vix6mdailyprices.csv",
destfile="vxmtData.csv")
vxv <- xts(read.zoo("vxvData.csv", header=TRUE, sep=",", format="%m/%d/%Y", skip=2))
vxmt <- xts(read.zoo("vxmtData.csv", header=TRUE, sep=",", format="%m/%d/%Y", skip=2))
# Our signal is that the there is more volatility expected long term than short term
# and the ratio is above its 60 day moving average.
vix3mVxmt <- Cl(vxv)/Cl(vxmt)
maLong <- SMA(vix3mVxmt, 60)
svxyQR <- vix3mVxmt < 1 & vix3mVxmt < maLong
last_sig <- tail(svxyQR, 5)
action <- ifelse(coredata(last_sig), "BUY", "SELL")
table <- cbind(index(last_sig), action, table)
#================================ TTO SIGNAL ===================================
getSymbols("SPY")
vol2 <- rollapply(Cl(SPY), FUN = sd.annualized, width = 2)
df <- merge(vxv, vol2, join = "inner")
colnames(df) <- c("", "", "", "vix3m", "vol2day")
sigSvxyTTO <- EMA(df$vix3m - df$vol2day, n = 2) > 1
last_sig_tto <- tail(sigSvxyTTO, 5)
action_tto  <- ifelse(coredata(last_sig_tto), "BUY", "SELL")
table <- cbind(data.frame(index(last_sig_tto), action_tto), table)
names(table) <- c("DateTTO", "ActionTTO", "DateQR", "ActionQR", "DateUpro", "ActionUpro")
body <- htmlTable(table, rnames = FALSE)
return(body)
}
sendSignal <- function(address = "benbuzzee@gmail.com", body = "message"){
send.mail(from = address,
to = address,
subject = "Daily Volatility Signal",
body = body,
smtp = list(host.name = "aspmx.l.google.com", port = 25),
authenticate = FALSE,
html = TRUE,
send = TRUE)
}
sendSignal(body = getSignal())
setwd("~/GitHub/Trading/volatility")
source("getSignal.R")
sendSignal(body = getSignal())
setwd("~/GitHub/Trading/volatility")
source("getSignal.R")
sendSignal(body = getSignal())
require(downloader)
require(quantmod)
require(PerformanceAnalytics)
require(TTR)
require(data.table)
download("http://www.cboe.com/publish/scheduledtask/mktdata/datahouse/vix3mdailyprices.csv",
destfile="vxvData.csv")
download("http://www.cboe.com/publish/ScheduledTask/MktData/datahouse/vix6mdailyprices.csv",
destfile="vxmtData.csv")
vxv <- xts(read.zoo("vxvData.csv", header=TRUE, sep=",", format="%m/%d/%Y", skip=2))
vxmt <- xts(read.zoo("vxmtData.csv", header=TRUE, sep=",", format="%m/%d/%Y", skip=2))
getSymbols("SVXY", src = "yahoo")
getSymbols("SPY")
getSymbols("XIVH")
getSymbols("UPRO")
getSymbols("TMF")
getSymbols("VXX")
getSymbols("SSO")
getSymbols("UBT")
spyRets <- Return.calculate(Cl(SPY))
svxyRets <- Return.calculate(Cl(SVXY))
xivhRets <- Return.calculate(Cl(XIVH))
uproRets <- Return.calculate(Cl(UPRO))
tmfRets <- Return.calculate(Cl(TMF))
vxxRets <- Return.calculate(Cl(VXX))
ssoRets <- Return.calculate(Cl(SSO))
ubtRets <- Return.calculate(Cl(UBT))
svxyOp <- CalculateReturns(Op(SVXY))
vxxOp <- CalculateReturns(Op(VXX))
vol2 <- rollapply(Cl(SPY), FUN = sd.annualized, width = 2)
df <- merge(vxv, vol2, join = "inner")
colnames(df) <- c("", "", "", "vix3m", "vol2day")
sigSvxyTTO <- EMA(df$vix3m - df$vol2day, n = 2) > 1
sigVxxTTO <- EMA(df$vix3m - df$vol2day, n = 2) < 1
retsTTO <- lag(sigSvxyTTO, 2) * svxyOp #   +  lag(sigVxxTTO, 2) * vxxOp
retsTTO <- lag(sigSvxyTTO, 2) * svxyOp #   +  lag(sigVxxTTO, 2) * vxxOp
# retsTTO <- tail(retsTTO, 200)
compare <- na.omit(cbind(spyRets, retsTTO))
stratStats(compare)
charts.PerformanceSummary(compare)
tail(sigSvxyTTO)
sum(!sigSvxyTTO, na.rm = T)/length(sigSvxyTTO)*252
sum(!svxyQR, na.rm = T)/length(svxyQR)*252
stratStats <- function(rets) {
stats <- rbind(table.AnnualizedReturns(rets), maxDrawdown(rets))
stats[5,] <- stats[1,]/stats[4,]
stats[6,] <- stats[1,]/UlcerIndex(rets)
rownames(stats)[4] <- "Worst Drawdown"
rownames(stats)[5] <- "Calmar Ratio"
rownames(stats)[6] <- "Ulcer Performance Index"
return(stats)
}
# QUANT R TRADER
maLong <- SMA(vix3mVxmt, 60)
ma125 <- SMA(vix3mVxmt, 125)
ma150 <- SMA(vix3mVxmt, 150)
ma_avg <- mean(c(maLong, ma125, ma150))
svxyQR <- vix3mVxmt < 1 & vix3mVxmt < maLong
vxxQR <- vix3mVxmt > 1 & ma_avg > 1
retsSvxy <- lag(svxyQR, 2) * svxyRets
retsXivh <- lag(svxyQR, 2) * xivhRets
retsLev3 <- .5*uproRets + .5 * tmfRets
retsLev2 <- .5*ssoRets + .5 * ubtRets
retsPort3 <- .5*retsTTO + .5 * retsLev3
retsPort2 <- .5*retsTTO + .5 * retsLev2
compare1 <- na.omit(cbind(retsTTO, retsLev3, retsLev2, retsPort3, spyRets))
names(compare1) <- c("SVXY", "UPRO", "Vol-UPRO-TMF", "SPY")
# compare1 <- tail(compare1, 300)
charts.PerformanceSummary(compare1)
stratStats(compare1)
retsPort3 <- .5*retsSvxy + .5 * retsLev3
retsPort2 <- .5*retsTTO + .5 * retsLev2
compare1 <- na.omit(cbind(retsTTO, retsLev3, retsLev2, retsPort3, spyRets))
names(compare1) <- c("SVXY", "UPRO", "Vol-UPRO-TMF", "SPY")
names(compare1) <- c("SVXY", "UPRO","2x", "Vol-UPRO-TMF", "SPY")
# compare1 <- tail(compare1, 300)
charts.PerformanceSummary(compare1)
stratStats(compare1)
retsLev2 <- .5*ssoRets + .5 * ubtRets
retsPort3 <- .5*retsSvxy + .5 * retsLev3
retsSvxy <- lag(svxyQR, 2) * svxyRets
# QUANT R TRADER
maLong <- SMA(vix3mVxmt, 60)
vix3mVxmt <- Cl(vxv)/Cl(vxmt)
stratStats <- function(rets) {
stats <- rbind(table.AnnualizedReturns(rets), maxDrawdown(rets))
stats[5,] <- stats[1,]/stats[4,]
stats[6,] <- stats[1,]/UlcerIndex(rets)
rownames(stats)[4] <- "Worst Drawdown"
rownames(stats)[5] <- "Calmar Ratio"
rownames(stats)[6] <- "Ulcer Performance Index"
return(stats)
}
# QUANT R TRADER
maLong <- SMA(vix3mVxmt, 60)
ma125 <- SMA(vix3mVxmt, 125)
ma150 <- SMA(vix3mVxmt, 150)
ma_avg <- mean(c(maLong, ma125, ma150))
svxyQR <- vix3mVxmt < 1 & vix3mVxmt < maLong
vxxQR <- vix3mVxmt > 1 & ma_avg > 1
retsSvxy <- lag(svxyQR, 2) * svxyRets
retsXivh <- lag(svxyQR, 2) * xivhRets
retsLev3 <- .5*uproRets + .5 * tmfRets
retsLev2 <- .5*ssoRets + .5 * ubtRets
retsPort3 <- .5*retsSvxy + .5 * retsLev3
retsPort2 <- .5*retsTTO + .5 * retsLev2
compare1 <- na.omit(cbind(retsTTO, retsLev3, retsLev2, retsPort3, spyRets))
names(compare1) <- c("SVXY", "UPRO","2x", "Vol-UPRO-TMF", "SPY")
# compare1 <- tail(compare1, 300)
charts.PerformanceSummary(compare1)
stratStats(compare1)
tail(svxyQR)
tail(sigSvxyTTO)
sum(!sigSvxyTTO, na.rm = T)/length(sigSvxyTTO)*252
sum(!svxyQR, na.rm = T)/length(svxyQR)*252
setwd("~/GitHub/Trading/volatility")
source("getSignal.R")
sendSignal(body = getSignal())
setwd("~/GitHub/Trading/volatility")
source("getSignal.R")
sendSignal(body = getSignal())
setwd("~/GitHub/Trading/volatility")
source("getSignal.R")
sendSignal(body = getSignal())
require(downloader)
require(quantmod)
require(mailR)
require(htmlTable)
require(PerformanceAnalytics)
require(fredr)
library(tidyverse)
#=== pull data ===#
api.key <- "bea3df08931786951992bd042f7b2254"
fredr_set_key(api.key)
# REQUIRES global fred object to be loaded
dt <- fredr(tag)
tag = "DFF"
# REQUIRES global fred object to be loaded
dt <- fredr(tag)
dt <- dt %>% as.tibble()
dt <- dt %>% as_tibble()
print("removing NAs")
# remove NA's
dt$value <- as.numeric(dt$value)
dt <- dt[!is.na(dt$value),]
#=== clean dataframe up ===#
print("cleaning data")
# remove unneeded columns
dt <-  dt %>% dplyr::select(date, value) %>% dplyr::mutate(date = as.Date(date))
# round all dates to nearest month
dt$date <- dt$date %>% lubridate::round_date(unit = "month")
# for each month only retain median value
dt <- dt %>% dplyr::group_by(date) %>% dplyr::summarize(value = median(value))
return(dt)
cue <- getFedData(tag = "UNRATE")
getSignal <- function(){
# ====================================== PHIL ECON UPRO/TMF SIGNAL ======================================================
getFedData <- function(tag = "DFF"){
#=== pull data ===#
api.key <- "bea3df08931786951992bd042f7b2254"
fredr_set_key(api.key)
# REQUIRES global fred object to be loaded
dt <- fredr(tag)
dt <- dt %>% as_tibble()
print("removing NAs")
# remove NA's
dt$value <- as.numeric(dt$value)
dt <- dt[!is.na(dt$value),]
#=== clean dataframe up ===#
print("cleaning data")
# remove unneeded columns
dt <-  dt %>% dplyr::select(date, value) %>% dplyr::mutate(date = as.Date(date))
# round all dates to nearest month
dt$date <- dt$date %>% lubridate::round_date(unit = "month")
# for each month only retain median value
dt <- dt %>% dplyr::group_by(date) %>% dplyr::summarize(value = median(value))
return(dt)
}
# ======== UNEMPLOYMENT ==========
cue <- getFedData(tag = "UNRATE")
cue <- xts(cue$value, order.by = cue$date)
# ========= SPY ===========
getSymbols("VFINX", from = "2000-12-01")
spy <- Cl(VFINX)
names(spy) <- "spy"
# ========= SIGNAL ===========
df <- merge(spy, cue, fill = NA)
df <- na.locf(df)
df <- df[index(df) > min(index(spy)),]
spySma10 <- EMA(df$spy, n = 22*12)
unrate12 <- EMA(df$cue, n = 22*12)
# Buy when unemployment is below its 12 mo moving average
signal_phil <- !((df$cue > unrate12) & (df$spy < spySma10))
last_sig_phil <- tail(signal_phil, 5)
action <- ifelse(coredata(last_sig_phil), "BUY", "SELL")
table <- data.frame(index(last_sig_phil), action)
# ====================================== QUANTSTRATTRADER STRAT ======================================================
# RETRIEVE THE DATA
download("http://www.cboe.com/publish/scheduledtask/mktdata/datahouse/vix3mdailyprices.csv",
destfile="vxvData.csv")
download("http://www.cboe.com/publish/ScheduledTask/MktData/datahouse/vix6mdailyprices.csv",
destfile="vxmtData.csv")
vxv <- xts(read.zoo("vxvData.csv", header=TRUE, sep=",", format="%m/%d/%Y", skip=2))
vxmt <- xts(read.zoo("vxmtData.csv", header=TRUE, sep=",", format="%m/%d/%Y", skip=2))
# Our signal is that the there is more volatility expected long term than short term
# and the ratio is above its 60 day moving average.
vix3mVxmt <- Cl(vxv)/Cl(vxmt)
maLong <- SMA(vix3mVxmt, 60)
svxyQR <- vix3mVxmt < 1 & vix3mVxmt < maLong
last_sig <- tail(svxyQR, 5)
action <- ifelse(coredata(last_sig), "BUY", "SELL")
table <- cbind(index(last_sig), action, table)
#================================ TTO SIGNAL ===================================
getSymbols("SPY")
vol2 <- rollapply(Cl(SPY), FUN = sd.annualized, width = 2)
df <- merge(vxv, vol2, join = "inner")
colnames(df) <- c("", "", "", "vix3m", "vol2day")
sigSvxyTTO <- EMA(df$vix3m - df$vol2day, n = 2) > 1
last_sig_tto <- tail(sigSvxyTTO, 5)
action_tto  <- ifelse(coredata(last_sig_tto), "BUY", "SELL")
table <- cbind(data.frame(index(last_sig_tto), action_tto), table)
names(table) <- c("DateTTO", "ActionTTO", "DateQR", "ActionQR", "DateUpro", "ActionUpro")
body <- htmlTable(table, rnames = FALSE)
return(body)
}
download("http://www.cboe.com/publish/scheduledtask/mktdata/datahouse/vix3mdailyprices.csv",
destfile="vxvData.csv")
download("http://www.cboe.com/publish/ScheduledTask/MktData/datahouse/vix6mdailyprices.csv",
destfile="vxmtData.csv")
vix3mVxmt <- Cl(vxv)/Cl(vxmt)
vxv <- xts(read.zoo("vxvData.csv", header=TRUE, sep=",", format="%m/%d/%Y", skip=2))
vxmt <- xts(read.zoo("vxmtData.csv", header=TRUE, sep=",", format="%m/%d/%Y", skip=2))
vix3mVxmt <- Cl(vxv)/Cl(vxmt)
stratStats <- function(rets) {
stats <- rbind(table.AnnualizedReturns(rets), maxDrawdown(rets))
stats[5,] <- stats[1,]/stats[4,]
stats[6,] <- stats[1,]/UlcerIndex(rets)
rownames(stats)[4] <- "Worst Drawdown"
rownames(stats)[5] <- "Calmar Ratio"
rownames(stats)[6] <- "Ulcer Performance Index"
return(stats)
}
# QUANT R TRADER
maLong <- SMA(vix3mVxmt, 60)
ma125 <- SMA(vix3mVxmt, 125)
ma150 <- SMA(vix3mVxmt, 150)
ma_avg <- mean(c(maLong, ma125, ma150))
svxyQR <- vix3mVxmt < 1 & vix3mVxmt < maLong
vxxQR <- vix3mVxmt > 1 & ma_avg > 1
plot(vix3mVxmt)
lines(maLong)
lines(maLong, col = "red")
plot(tail(vix3mVxmt, 252))
lines(maLong, col = "red")
